// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bradfordwagner/go-util/bwutil (interfaces: StubOneOf,StubConversionOneOf)
//
// Generated by this command:
//
//	mockgen -destination=mocks/bwutil/module.go -package=mock_bwutil github.com/bradfordwagner/go-util/bwutil StubOneOf,StubConversionOneOf
//

// Package mock_bwutil is a generated GoMock package.
package mock_bwutil

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStubOneOf is a mock of StubOneOf interface.
type MockStubOneOf struct {
	ctrl     *gomock.Controller
	recorder *MockStubOneOfMockRecorder
}

// MockStubOneOfMockRecorder is the mock recorder for MockStubOneOf.
type MockStubOneOfMockRecorder struct {
	mock *MockStubOneOf
}

// NewMockStubOneOf creates a new mock instance.
func NewMockStubOneOf(ctrl *gomock.Controller) *MockStubOneOf {
	mock := &MockStubOneOf{ctrl: ctrl}
	mock.recorder = &MockStubOneOfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStubOneOf) EXPECT() *MockStubOneOfMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockStubOneOf) Invoke(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invoke", arg0)
}

// Invoke indicates an expected call of Invoke.
func (mr *MockStubOneOfMockRecorder) Invoke(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockStubOneOf)(nil).Invoke), arg0)
}

// MockStubConversionOneOf is a mock of StubConversionOneOf interface.
type MockStubConversionOneOf struct {
	ctrl     *gomock.Controller
	recorder *MockStubConversionOneOfMockRecorder
}

// MockStubConversionOneOfMockRecorder is the mock recorder for MockStubConversionOneOf.
type MockStubConversionOneOfMockRecorder struct {
	mock *MockStubConversionOneOf
}

// NewMockStubConversionOneOf creates a new mock instance.
func NewMockStubConversionOneOf(ctrl *gomock.Controller) *MockStubConversionOneOf {
	mock := &MockStubConversionOneOf{ctrl: ctrl}
	mock.recorder = &MockStubConversionOneOfMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStubConversionOneOf) EXPECT() *MockStubConversionOneOfMockRecorder {
	return m.recorder
}

// Invoke mocks base method.
func (m *MockStubConversionOneOf) Invoke(arg0 any) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Invoke", arg0)
}

// Invoke indicates an expected call of Invoke.
func (mr *MockStubConversionOneOfMockRecorder) Invoke(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invoke", reflect.TypeOf((*MockStubConversionOneOf)(nil).Invoke), arg0)
}
